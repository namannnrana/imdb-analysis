# -*- coding: utf-8 -*-
"""imdb_analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wO7mnS6GEXG1aRcmsd6UX-mxnew4m6dt
"""

import pandas as pd
import numpy as np
import csv

imdb_df = pd.read_csv('imdb_data.csv')

imdb_df.columns

#columns which are not null
column_to_keep = ['budget','genres','original_language','original_title','cast','crew','revenue']

imdb_df.loc[~imdb_df['genres'].isna(),'genres']

type(imdb_df.loc[0,'cast'])

#converting only non null string
def convert_to_list(str):
  return eval(str)

#apply the above function only on null values in genres column
imdb_df.loc[~imdb_df['genres'].isna(),'genres'] = imdb_df.loc[~imdb_df['genres'].isna(),'genres'].apply(convert_to_list)

#apply the above function only on null values in cast column

imdb_df.loc[~imdb_df['cast'].isna(),'cast'] = imdb_df.loc[~imdb_df['cast'].isna(),'cast'].apply(convert_to_list)

#apply the above function only on null values in crew column

imdb_df.loc[~imdb_df['crew'].isna(),'crew'] = imdb_df.loc[~imdb_df['crew'].isna(),'crew'].apply(convert_to_list)

#create a copy of original df
imdb_df_new = imdb_df.copy()

imdb_df.columns

#Q1.Which movie made the highest profit? Who were its producer and director? Identify
#the actors in that film.
imdb_df_new['profit'] = imdb_df_new['revenue'] - imdb_df_new['budget']

crew = imdb_df_new[imdb_df_new['profit'] == imdb_df_new['profit'].max()][['original_title','crew']]

# movie which has max profit
print(crew['original_title'])

# Producers name which movie name has max profit
print('The Producers are:')
for memebers in crew['crew']:
  for member in memebers:
    if member['job'] == 'Producer':
      print(member['name'])

# Director name which movie has max profit
for memebers in crew['crew']:
  for member in memebers:
    if member['job'] == 'Director':
      print('The Director of movie is:',member['name'])

cast = imdb_df_new[imdb_df_new['profit'] == imdb_df_new['profit'].max()]['cast']

for members in cast:
  for member in members:
    print(f"Name: {member['name']} | Character: {member['character']}")

#Q2.This data has information about movies made in different languages. Which
#language has the highest average ROI (return on investment)?


#calculate roi
imdb_df_new['ROI'] = imdb_df_new['profit']/imdb_df_new['budget'] * 100
#Use groupby function on movie languages and ROI and finding mean
imdb_df_new. groupby ( 'original_language')['ROI'].mean().reset_index().sort_values(by="ROI",ascending=False).head(1)

#Q3.Find out the unique genres of movies in this dataset.
unique_genre = set()
for data in imdb_df_new['genres']:
  # Check if data is iterable before proceeding
  if isinstance(data, (list, tuple)):
    for genre in data:
      if isinstance(genre, dict) and 'name' in genre:
        unique_genre.add(genre['name'])

print(unique_genre)

imdb_df_new.columns

#Q4.Make a table of all the producers and directors of each movie. Find the top 3
#producers who have produced movies with the highest average Rol?

no_na_crew = imdb_df_new[~imdb_df_new['crew'].isna()]

#A simple function to extract list of all producers for a given movie_index
def create_producer_list(index):
  movie_index = no_na_crew. iloc[index]
  crew_list= movie_index.loc[ 'crew']
  producer_list=[]
  for elem in crew_list:
    if elem['job']=="Producer":
      producer_list.append(elem[ 'name'])
  return producer_list
create_producer_list(61)

#A simple function to extract names of all directors for a given movie_index
#each movie has only one director
def create_director (index):
  movie_index = no_na_crew.iloc[index]
  crew_list= movie_index.loc["crew"]
  for elem in crew_list:
    if elem['job'] == 'Director':
      return elem['name']

create_director(61)

#create a empty DataFrame with required Column names in which we will append data later
Table = pd.DataFrame(columns=['Movie Title','Producers','Directorsâ€™, ROI'])

data_list = []  # Temporary list to store rows before converting to DataFrame

for index, row in no_na_crew.iterrows():
    try:
        data_list.append({
            'Movie Title': no_na_crew.loc[index, 'original_title'],
            'Producers': create_producer_list(index),
            'Directors': create_director(index),
            'ROI': row['ROI']
        })
    except:
        continue

# Convert the list into a DataFrame and assign it to Table
Table = pd.DataFrame(data_list)

Table.head(10)

#Q5.Which actor has acted in the most number of movies? Deep dive into the movies,
#genres and profits corresponding to this actor.


#considering only those rows in cast column which have no null values
no_na_cast = imdb_df_new[~imdb_df_new[ 'cast'].isna()]
no_na_cast.loc[0, 'cast'][0]['name']

actor_list = []
for index,row in no_na_cast.iterrows():
  for iter in no_na_cast.loc[index, 'cast']:
    if type(iter) == dict:
      actor= iter['name']
      actor_list.append(actor)

#create a DataFrame with actor list
Actor_Table = pd.DataFrame(actor_list,columns = ['Name of Actor'])

Actor_Table.shape

Actor_Table.head()

#sorting the actors using groupby function
Actor_Table.value_counts().reset_index().head()

print('Sanuel L. Jackson and Robert De Niro both have done 3@ films')

profit1 = []
profit2 = []
movie1 = []
movie2 = []
for index,row in no_na_cast.iterrows():
  for iter in no_na_cast.loc[index, 'cast']:
    if type(iter) == dict:
      actor= iter['name']
      if 'Robert De Niro' in actor:
        profit1.append(no_na_cast.loc[index, 'profit'])
        movie1.append(no_na_cast.loc[index, 'original_title'])



      if 'Samuel L. Jackson' in actor:
        profit2.append(no_na_cast.loc[index, 'profit'])
        movie2.append(no_na_cast.loc[index, 'original_title'])

gener_r = []
for i in range(len(movie1)):
    a = [g['name'] for g in no_na_cast.loc[i, 'genres']]
    gener_r.append(a)

gener_s = []
for i in range(len(movie2)):
    b = [g['name'] for g in no_na_cast.loc[i, 'genres']]
    gener_s.append(b)

genr = np.array(gener_r, dtype=object)
gens = np.array(gener_s, dtype=object)

#creating sub dataframe for Robert
mov1= pd.DataFrame(movie1,columns=[ "Movie Name"])
prof1=pd.DataFrame(profit1,columns=[ 'Movie Profit'])
gen1= pd.DataFrame(genr.flatten(),columns=[ 'Genres'])


Movies_by_Robert=pd.concat([mov1,gen1,prof1],axis=1)

Movies_by_Robert.sort_values(by="Movie Profit",ascending=False).head()

#creating sub dataframe for Samuel
mov2= pd.DataFrame(movie2,columns=[ "Movie Name"])
prof2=pd.DataFrame(profit2,columns=[ 'Movie Profit'])
gen2= pd.DataFrame(gens.flatten(),columns=[ 'Genres'])


Movies_by_Samuel=pd.concat([mov2,gen2,prof2],axis=1)


Movies_by_Samuel.sort_values(by="Movie Profit",ascending=False).head()